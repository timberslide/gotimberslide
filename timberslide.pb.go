// Code generated by protoc-gen-go.
// source: timberslide.proto
// DO NOT EDIT!

/*
Package ts is a generated protocol buffer package.

It is generated from these files:
	timberslide.proto

It has these top-level messages:
	Event
	EventReply
	Topic
	Register
	RegisterReply
	TopicsReq
	TopicsReply
*/
package ts

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event struct {
	Topic   string `protobuf:"bytes,1,opt,name=Topic" json:"Topic,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message" json:"Message,omitempty"`
	Done    bool   `protobuf:"varint,3,opt,name=Done" json:"Done,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type EventReply struct {
}

func (m *EventReply) Reset()                    { *m = EventReply{} }
func (m *EventReply) String() string            { return proto.CompactTextString(m) }
func (*EventReply) ProtoMessage()               {}
func (*EventReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Topic struct {
	ID       int64  `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Position int64  `protobuf:"varint,3,opt,name=Position" json:"Position,omitempty"`
}

func (m *Topic) Reset()                    { *m = Topic{} }
func (m *Topic) String() string            { return proto.CompactTextString(m) }
func (*Topic) ProtoMessage()               {}
func (*Topic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Register struct {
	Topic string `protobuf:"bytes,1,opt,name=Topic" json:"Topic,omitempty"`
	User  string `protobuf:"bytes,2,opt,name=User" json:"User,omitempty"`
}

func (m *Register) Reset()                    { *m = Register{} }
func (m *Register) String() string            { return proto.CompactTextString(m) }
func (*Register) ProtoMessage()               {}
func (*Register) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type RegisterReply struct {
}

func (m *RegisterReply) Reset()                    { *m = RegisterReply{} }
func (m *RegisterReply) String() string            { return proto.CompactTextString(m) }
func (*RegisterReply) ProtoMessage()               {}
func (*RegisterReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type TopicsReq struct {
}

func (m *TopicsReq) Reset()                    { *m = TopicsReq{} }
func (m *TopicsReq) String() string            { return proto.CompactTextString(m) }
func (*TopicsReq) ProtoMessage()               {}
func (*TopicsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type TopicsReply struct {
	Topics []*Topic `protobuf:"bytes,1,rep,name=topics" json:"topics,omitempty"`
}

func (m *TopicsReply) Reset()                    { *m = TopicsReply{} }
func (m *TopicsReply) String() string            { return proto.CompactTextString(m) }
func (*TopicsReply) ProtoMessage()               {}
func (*TopicsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *TopicsReply) GetTopics() []*Topic {
	if m != nil {
		return m.Topics
	}
	return nil
}

func init() {
	proto.RegisterType((*Event)(nil), "ts.Event")
	proto.RegisterType((*EventReply)(nil), "ts.EventReply")
	proto.RegisterType((*Topic)(nil), "ts.Topic")
	proto.RegisterType((*Register)(nil), "ts.Register")
	proto.RegisterType((*RegisterReply)(nil), "ts.RegisterReply")
	proto.RegisterType((*TopicsReq)(nil), "ts.TopicsReq")
	proto.RegisterType((*TopicsReply)(nil), "ts.TopicsReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Ingest service

type IngestClient interface {
	StreamEvents(ctx context.Context, opts ...grpc.CallOption) (Ingest_StreamEventsClient, error)
}

type ingestClient struct {
	cc *grpc.ClientConn
}

func NewIngestClient(cc *grpc.ClientConn) IngestClient {
	return &ingestClient{cc}
}

func (c *ingestClient) StreamEvents(ctx context.Context, opts ...grpc.CallOption) (Ingest_StreamEventsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Ingest_serviceDesc.Streams[0], c.cc, "/ts.Ingest/StreamEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &ingestStreamEventsClient{stream}
	return x, nil
}

type Ingest_StreamEventsClient interface {
	Send(*Event) error
	Recv() (*EventReply, error)
	grpc.ClientStream
}

type ingestStreamEventsClient struct {
	grpc.ClientStream
}

func (x *ingestStreamEventsClient) Send(m *Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ingestStreamEventsClient) Recv() (*EventReply, error) {
	m := new(EventReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Ingest service

type IngestServer interface {
	StreamEvents(Ingest_StreamEventsServer) error
}

func RegisterIngestServer(s *grpc.Server, srv IngestServer) {
	s.RegisterService(&_Ingest_serviceDesc, srv)
}

func _Ingest_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IngestServer).StreamEvents(&ingestStreamEventsServer{stream})
}

type Ingest_StreamEventsServer interface {
	Send(*EventReply) error
	Recv() (*Event, error)
	grpc.ServerStream
}

type ingestStreamEventsServer struct {
	grpc.ServerStream
}

func (x *ingestStreamEventsServer) Send(m *EventReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ingestStreamEventsServer) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Ingest_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ts.Ingest",
	HandlerType: (*IngestServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvents",
			Handler:       _Ingest_StreamEvents_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

// Client API for Streamer service

type StreamerClient interface {
	GetStream(ctx context.Context, in *Topic, opts ...grpc.CallOption) (Streamer_GetStreamClient, error)
}

type streamerClient struct {
	cc *grpc.ClientConn
}

func NewStreamerClient(cc *grpc.ClientConn) StreamerClient {
	return &streamerClient{cc}
}

func (c *streamerClient) GetStream(ctx context.Context, in *Topic, opts ...grpc.CallOption) (Streamer_GetStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Streamer_serviceDesc.Streams[0], c.cc, "/ts.Streamer/GetStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamerGetStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Streamer_GetStreamClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type streamerGetStreamClient struct {
	grpc.ClientStream
}

func (x *streamerGetStreamClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Streamer service

type StreamerServer interface {
	GetStream(*Topic, Streamer_GetStreamServer) error
}

func RegisterStreamerServer(s *grpc.Server, srv StreamerServer) {
	s.RegisterService(&_Streamer_serviceDesc, srv)
}

func _Streamer_GetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Topic)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamerServer).GetStream(m, &streamerGetStreamServer{stream})
}

type Streamer_GetStreamServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type streamerGetStreamServer struct {
	grpc.ServerStream
}

func (x *streamerGetStreamServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

var _Streamer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ts.Streamer",
	HandlerType: (*StreamerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStream",
			Handler:       _Streamer_GetStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

// Client API for Topics service

type TopicsClient interface {
	RegisterTopic(ctx context.Context, in *Register, opts ...grpc.CallOption) (*RegisterReply, error)
	GetTopics(ctx context.Context, in *TopicsReq, opts ...grpc.CallOption) (*TopicsReply, error)
}

type topicsClient struct {
	cc *grpc.ClientConn
}

func NewTopicsClient(cc *grpc.ClientConn) TopicsClient {
	return &topicsClient{cc}
}

func (c *topicsClient) RegisterTopic(ctx context.Context, in *Register, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := grpc.Invoke(ctx, "/ts.Topics/registerTopic", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicsClient) GetTopics(ctx context.Context, in *TopicsReq, opts ...grpc.CallOption) (*TopicsReply, error) {
	out := new(TopicsReply)
	err := grpc.Invoke(ctx, "/ts.Topics/getTopics", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Topics service

type TopicsServer interface {
	RegisterTopic(context.Context, *Register) (*RegisterReply, error)
	GetTopics(context.Context, *TopicsReq) (*TopicsReply, error)
}

func RegisterTopicsServer(s *grpc.Server, srv TopicsServer) {
	s.RegisterService(&_Topics_serviceDesc, srv)
}

func _Topics_RegisterTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Register)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicsServer).RegisterTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ts.Topics/RegisterTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicsServer).RegisterTopic(ctx, req.(*Register))
	}
	return interceptor(ctx, in, info, handler)
}

func _Topics_GetTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicsServer).GetTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ts.Topics/GetTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicsServer).GetTopics(ctx, req.(*TopicsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Topics_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ts.Topics",
	HandlerType: (*TopicsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "registerTopic",
			Handler:    _Topics_RegisterTopic_Handler,
		},
		{
			MethodName: "getTopics",
			Handler:    _Topics_GetTopics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("timberslide.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x92, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0x9b, 0xc6, 0xc6, 0x64, 0xfa, 0x8f, 0x0e, 0x1e, 0x42, 0x4e, 0xba, 0x20, 0xf4, 0x62,
	0xad, 0xd1, 0x8b, 0xf7, 0x4a, 0x29, 0xa2, 0xc8, 0xaa, 0x1f, 0xa0, 0xd5, 0x21, 0x04, 0xdb, 0xa4,
	0x66, 0x17, 0xc1, 0x6f, 0xef, 0x66, 0x36, 0x9b, 0xf6, 0xe2, 0xed, 0xbd, 0xec, 0x9b, 0xdf, 0xcc,
	0x83, 0xc0, 0x44, 0xe7, 0xbb, 0x0d, 0x55, 0x6a, 0x9b, 0x7f, 0xd2, 0x6c, 0x5f, 0x95, 0xba, 0xc4,
	0xae, 0x56, 0xe2, 0x11, 0x7a, 0x0f, 0x3f, 0x54, 0x68, 0x3c, 0x83, 0xde, 0x5b, 0xb9, 0xcf, 0x3f,
	0x62, 0xef, 0xdc, 0x9b, 0x46, 0xd2, 0x1a, 0x8c, 0xe1, 0xf4, 0x89, 0x94, 0x5a, 0x67, 0x14, 0x77,
	0xf9, 0xbb, 0xb3, 0x88, 0x70, 0xb2, 0x28, 0x0b, 0x8a, 0x7d, 0xf3, 0x39, 0x94, 0xac, 0xc5, 0x00,
	0x80, 0x61, 0x92, 0xf6, 0xdb, 0x5f, 0xb1, 0x6c, 0x88, 0x38, 0x82, 0xee, 0x6a, 0xc1, 0x5c, 0x5f,
	0x1a, 0x55, 0x8f, 0x3e, 0xaf, 0x77, 0x8e, 0xc8, 0x1a, 0x13, 0x08, 0x5f, 0x4a, 0x95, 0xeb, 0xbc,
	0x2c, 0x18, 0xe9, 0xcb, 0xd6, 0x8b, 0x3b, 0x08, 0x25, 0x65, 0xb9, 0xd2, 0x54, 0xfd, 0x73, 0xa6,
	0x21, 0xbe, 0x2b, 0xaa, 0x1c, 0xb1, 0xd6, 0x62, 0x0c, 0x43, 0x37, 0x65, 0xef, 0xe9, 0x43, 0xc4,
	0x69, 0x25, 0xe9, 0x5b, 0xcc, 0xa1, 0xef, 0x8c, 0x79, 0xc3, 0x0b, 0x08, 0x34, 0x5b, 0xc3, 0xf5,
	0xa7, 0xfd, 0x34, 0x9a, 0x69, 0x35, 0xe3, 0x80, 0x6c, 0x1e, 0xd2, 0x7b, 0x08, 0x56, 0x45, 0x46,
	0x4a, 0xe3, 0x35, 0x0c, 0x5e, 0x75, 0x45, 0xeb, 0x1d, 0x97, 0x55, 0xc8, 0x61, 0xd6, 0xc9, 0xa8,
	0x95, 0x76, 0x67, 0x67, 0xea, 0xcd, 0xbd, 0xf4, 0x06, 0x42, 0x3b, 0x60, 0x0a, 0x5c, 0x42, 0xb4,
	0x24, 0x6d, 0x2d, 0x1e, 0xd6, 0x24, 0x07, 0x88, 0xe8, 0x98, 0x91, 0x2f, 0x08, 0xec, 0x7d, 0x98,
	0xc2, 0xb0, 0x6a, 0x7a, 0xd8, 0xb2, 0x83, 0x3a, 0xe9, 0xaa, 0x25, 0x93, 0x63, 0xd7, 0x2c, 0xc5,
	0x2b, 0x88, 0x32, 0xd2, 0x0d, 0x60, 0xd8, 0x2e, 0xa9, 0x9b, 0x27, 0xe3, 0x63, 0xcb, 0xf1, 0x4d,
	0xc0, 0xff, 0xc3, 0xed, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0d, 0x73, 0xf1, 0xce, 0x24, 0x02,
	0x00, 0x00,
}
